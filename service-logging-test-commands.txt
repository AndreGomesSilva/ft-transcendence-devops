# =============================================================================
# GENERIC SERVICE LOGGING TEST COMMANDS
# =============================================================================
# Copy and paste these commands to test any service logging integration
# Replace [SERVICE_NAME] and [PORT] with your actual service details
# =============================================================================

# Available services in this project:
# - frontend (port 3005)
# - game (port 3002)
# - Add your own services here...

# =============================================================================
# QUICK SERVICE REFERENCE
# =============================================================================
# SERVICE_NAME = frontend | game | your-service-name
# SERVICE_PORT = 3005 | 3002 | your-service-port
# =============================================================================

# 1. CHECK CONTAINER STATUS
# -------------------------
docker-compose ps
docker-compose ps [SERVICE_NAME]

# Examples:
docker-compose ps frontend
docker-compose ps game

# 2. CHECK SERVICE LOGS
# ---------------------
docker-compose logs [SERVICE_NAME] --tail=10
docker-compose logs [SERVICE_NAME] --tail=20

# Examples:
docker-compose logs frontend --tail=10
docker-compose logs game --tail=10

# 3. GENERATE TEST LOGS (curl commands)
# ------------------------------------
# Test root endpoint
curl -s http://localhost:[PORT]/

# Test non-existent routes (triggers logging/fallback)
curl -s http://localhost:[PORT]/test-route
curl -s http://localhost:[PORT]/api/test
curl -s http://localhost:[PORT]/nonexistent
curl -s http://localhost:[PORT]/dashboard
curl -s http://localhost:[PORT]/profile
curl -s http://localhost:[PORT]/settings

# Test with different user agents
curl -s -H "User-Agent: TestBot/1.0" http://localhost:[PORT]/bot-test
curl -s -H "User-Agent: Mobile/Safari" http://localhost:[PORT]/mobile-test

# Multiple requests at once
curl -s http://localhost:[PORT]/test1 > /dev/null && curl -s http://localhost:[PORT]/test2 > /dev/null && curl -s http://localhost:[PORT]/test3 > /dev/null

# FRONTEND SERVICE EXAMPLES (port 3005):
curl -s http://localhost:3005/
curl -s http://localhost:3005/login-test
curl -s http://localhost:3005/dashboard
curl -s http://localhost:3005/profile

# GAME SERVICE EXAMPLES (port 3002):
curl -s http://localhost:3002/
curl -s http://localhost:3002/game-stats
curl -s http://localhost:3002/leaderboard
curl -s http://localhost:3002/tournament

# 4. CHECK ELASTICSEARCH STATUS
# -----------------------------
# Check Elasticsearch health
curl -s http://localhost:9200/_cluster/health

# Check available indices
curl -s http://localhost:9200/_cat/indices?v

# Count logs for specific service
curl -s "http://localhost:9200/logs-*/_count?q=[SERVICE_NAME]"

# Examples:
curl -s "http://localhost:9200/logs-*/_count?q=frontend"
curl -s "http://localhost:9200/logs-*/_count?q=game-service"

# 5. SEARCH LOGS IN ELASTICSEARCH
# -------------------------------
# Get latest 5 logs for specific service
curl -s "http://localhost:9200/logs-*/_search?q=[SERVICE_NAME]&size=5&sort=@timestamp:desc"

# Get latest 5 logs formatted (requires jq)
curl -s "http://localhost:9200/logs-*/_search?q=[SERVICE_NAME]&size=5&sort=@timestamp:desc" | jq '.hits.hits[] | ._source | {time, service, level, message: .msg, path, action, ip, userAgent}'

# Get all logs for specific service (formatted)
curl -s "http://localhost:9200/logs-*/_search?q=[SERVICE_NAME]&size=20&sort=@timestamp:desc" | jq '.hits.hits[] | ._source | {timestamp: .time, service: .service[0], level, path, action, ip, userAgent, message: .msg}'

# Search for specific actions
curl -s "http://localhost:9200/logs-*/_search?q=[SERVICE_NAME]%20AND%20action:spa_fallback&size=10"

# Search for specific paths
curl -s "http://localhost:9200/logs-*/_search?q=[SERVICE_NAME]%20AND%20path:/api/test"

# FRONTEND SERVICE EXAMPLES:
curl -s "http://localhost:9200/logs-*/_search?q=frontend&size=5&sort=@timestamp:desc"
curl -s "http://localhost:9200/logs-*/_search?q=frontend&size=5&sort=@timestamp:desc" | jq '.hits.hits[] | ._source | {time, service, level, message: .msg, path}'

# GAME SERVICE EXAMPLES:
curl -s "http://localhost:9200/logs-*/_search?q=game-service&size=5&sort=@timestamp:desc"
curl -s "http://localhost:9200/logs-*/_search?q=game-service&size=5&sort=@timestamp:desc" | jq '.hits.hits[] | ._source | {time, service, level, message: .msg, path}'

# 6. TEST LOGSTASH CONNECTION
# ---------------------------
# Test if Logstash port is accessible
nc -zv localhost 5000

# Check Logstash logs
docker-compose logs logstash --tail=10

# 7. TEST KIBANA ACCESS
# ---------------------
# Check Kibana status
curl -s http://localhost:5601/api/status

# Access Kibana web interface
echo "Open in browser: http://localhost:5601"

# 8. MONITOR LOGS IN REAL-TIME
# ----------------------------
# Monitor specific service logs (press Ctrl+C to stop)
docker-compose logs -f [SERVICE_NAME]

# Monitor all logs
docker-compose logs -f

# Examples:
docker-compose logs -f frontend
docker-compose logs -f game

# 9. CLEANUP COMMANDS
# ------------------
# Delete all logs from Elasticsearch (BE CAREFUL!)
curl -X DELETE "http://localhost:9200/logs-*"

# Restart specific service
docker-compose restart [SERVICE_NAME]

# Restart ELK stack
docker-compose restart elasticsearch logstash kibana

# Examples:
docker-compose restart frontend
docker-compose restart game

# 10. USEFUL COMBINATIONS
# -----------------------
# Generate logs and check immediately for any service
curl -s http://localhost:[PORT]/test-endpoint > /dev/null && sleep 2 && curl -s "http://localhost:9200/logs-*/_search?q=[SERVICE_NAME]&size=1&sort=@timestamp:desc" | jq '.hits.hits[0]._source'

# Check log count before and after test
echo "Before:" && curl -s "http://localhost:9200/logs-*/_count?q=[SERVICE_NAME]" | jq '.count' && curl -s http://localhost:[PORT]/new-test > /dev/null && sleep 2 && echo "After:" && curl -s "http://localhost:9200/logs-*/_count?q=[SERVICE_NAME]" | jq '.count'

# FRONTEND EXAMPLES:
curl -s http://localhost:3005/test-endpoint > /dev/null && sleep 2 && curl -s "http://localhost:9200/logs-*/_search?q=frontend&size=1&sort=@timestamp:desc" | jq '.hits.hits[0]._source'

# GAME EXAMPLES:
curl -s http://localhost:3002/test-endpoint > /dev/null && sleep 2 && curl -s "http://localhost:9200/logs-*/_search?q=game-service&size=1&sort=@timestamp:desc" | jq '.hits.hits[0]._source'

# 11. ADVANCED QUERIES
# --------------------
# Get logs from last 5 minutes for specific service
curl -s "http://localhost:9200/logs-*/_search" -H 'Content-Type: application/json' -d '{"query":{"bool":{"must":[{"match":{"service":"[SERVICE_NAME]"}},{"range":{"@timestamp":{"gte":"now-5m"}}}]}},"sort":[{"@timestamp":{"order":"desc"}}]}'

# Get unique paths accessed by service
curl -s "http://localhost:9200/logs-*/_search" -H 'Content-Type: application/json' -d '{"query":{"match":{"service":"[SERVICE_NAME]"}},"aggs":{"unique_paths":{"terms":{"field":"path.keyword"}}},"size":0}'

# Get logs by level (info, warn, error)
curl -s "http://localhost:9200/logs-*/_search?q=[SERVICE_NAME]%20AND%20level:error&size=10"
curl -s "http://localhost:9200/logs-*/_search?q=[SERVICE_NAME]%20AND%20level:warn&size=10"
curl -s "http://localhost:9200/logs-*/_search?q=[SERVICE_NAME]%20AND%20level:info&size=10"

# 12. DEBUGGING COMMANDS
# ----------------------
# Check if service is responding
curl -I http://localhost:[PORT]/

# Check service container health
docker-compose ps [SERVICE_NAME]

# Check service container logs for errors
docker-compose logs [SERVICE_NAME] | grep -i error

# Check if observability package is working
docker-compose exec [SERVICE_NAME] cat /app/package.json | grep observability

# Examples:
curl -I http://localhost:3005/
curl -I http://localhost:3002/
docker-compose logs frontend | grep -i error
docker-compose logs game | grep -i error

# 13. COMPARE SERVICES
# --------------------
# Compare log counts between services
echo "Frontend logs:" && curl -s "http://localhost:9200/logs-*/_count?q=frontend" | jq '.count'
echo "Game logs:" && curl -s "http://localhost:9200/logs-*/_count?q=game-service" | jq '.count'

# Get latest log from each service
echo "=== FRONTEND LATEST LOG ===" && curl -s "http://localhost:9200/logs-*/_search?q=frontend&size=1&sort=@timestamp:desc" | jq '.hits.hits[0]._source | {time, service, level, message: .msg, path}'
echo "=== GAME LATEST LOG ===" && curl -s "http://localhost:9200/logs-*/_search?q=game-service&size=1&sort=@timestamp:desc" | jq '.hits.hits[0]._source | {time, service, level, message: .msg, path}'

# 14. QUICK TEST SEQUENCE FOR ANY SERVICE
# ---------------------------------------
# Replace [SERVICE_NAME] and [PORT] with your values
test_service() {
    SERVICE_NAME=$1
    PORT=$2
    echo "Testing service: $SERVICE_NAME on port: $PORT"
    echo "1. Checking container..." && docker-compose ps $SERVICE_NAME
    echo "2. Generating test logs..." && curl -s http://localhost:$PORT/quick-test > /dev/null
    echo "3. Waiting for processing..." && sleep 3
    echo "4. Checking log count..." && curl -s "http://localhost:9200/logs-*/_count?q=$SERVICE_NAME" | jq '.count'
    echo "5. Getting latest log..." && curl -s "http://localhost:9200/logs-*/_search?q=$SERVICE_NAME&size=1&sort=@timestamp:desc" | jq '.hits.hits[0]._source | {time, service, level, message: .msg, path}'
}

# Usage examples:
# test_service frontend 3005
# test_service game-service 3002

# 15. BATCH TESTING ALL SERVICES
# ------------------------------
# Test all services at once
echo "=== TESTING ALL SERVICES ==="
curl -s http://localhost:3005/batch-test > /dev/null
curl -s http://localhost:3002/batch-test > /dev/null
sleep 3
echo "Frontend logs:" && curl -s "http://localhost:9200/logs-*/_count?q=frontend" | jq '.count'
echo "Game logs:" && curl -s "http://localhost:9200/logs-*/_count?q=game-service" | jq '.count'

# =============================================================================
# EXAMPLES OF EXPECTED OUTPUTS
# =============================================================================

# Expected log structure in Elasticsearch (varies by service):
# FRONTEND:
# {
#   "time": "2025-07-11T20:32:04.147Z",
#   "service": ["frontend", "frontend"],
#   "level": "info",
#   "message": "SPA route accessed",
#   "path": "/login",
#   "ip": "172.18.0.1",
#   "userAgent": "curl/8.7.1"
# }

# GAME:
# {
#   "time": "2025-07-11T20:32:04.147Z",
#   "service": ["game-service", "game-service"],
#   "level": "info",
#   "message": "SPA fallback to index.html",
#   "path": "/api/test",
#   "action": "spa_fallback",
#   "ip": "172.18.0.1",
#   "userAgent": "curl/8.7.1"
# }

# =============================================================================
# TROUBLESHOOTING
# =============================================================================

# If no logs appear in Elasticsearch:
# 1. Check if service is running: docker-compose ps [SERVICE_NAME]
# 2. Check if Logstash is running: docker-compose ps logstash
# 3. Check Logstash logs: docker-compose logs logstash
# 4. Test Logstash connection: nc -zv localhost 5000
# 5. Check service logs: docker-compose logs [SERVICE_NAME]
# 6. Check service connection to Logstash: docker-compose logs [SERVICE_NAME] | grep -i logstash

# If service is not responding:
# 1. Check container status: docker-compose ps [SERVICE_NAME]
# 2. Check service logs: docker-compose logs [SERVICE_NAME]
# 3. Restart service: docker-compose restart [SERVICE_NAME]
# 4. Check port binding: docker-compose ps [SERVICE_NAME]

# If jq is not installed:
# - macOS: brew install jq
# - Ubuntu: sudo apt-get install jq
# - Or use commands without jq (they'll show raw JSON)

# 16. PROMETHEUS ALERT TESTING
# ----------------------------
# Test Prometheus alerts and monitoring

# Check if Prometheus is running
docker-compose ps prometheus

# Restart Prometheus to pick up new alert rules
docker-compose restart prometheus

# Check Prometheus targets (what services are monitored)
curl -s http://localhost:9090/api/v1/targets | jq '.data.activeTargets[] | {job: .labels.job, instance: .labels.instance, health: .health, lastScrape: .lastScrape}'

# Check all loaded alert rules
curl -s http://localhost:9090/api/v1/rules | jq '.data.groups[] | select(.name == "ft_transcendence_alerts") | .rules[] | {alert: .name, state: .state}'

# Check currently firing alerts
curl -s http://localhost:9090/api/v1/alerts | jq '.data.alerts[] | {alertname: .labels.alertname, job: .labels.job, state: .state, activeAt: .activeAt}'

# Check specific alert details
curl -s http://localhost:9090/api/v1/alerts | jq '.data.alerts[] | select(.labels.alertname == "TestAlert") | {job: .labels.job, state: .state, activeAt: .activeAt}'

# Test ServiceDown alert by stopping a service
docker-compose stop game
echo "Waiting 1 minute for ServiceDown alert..."
sleep 60
curl -s http://localhost:9090/api/v1/alerts | jq '.data.alerts[] | select(.labels.alertname == "ServiceDown") | {job: .labels.job, state: .state}'
docker-compose start game

# Monitor alerts in real-time (check every 10 seconds)
watch -n 10 'curl -s http://localhost:9090/api/v1/alerts | jq ".data.alerts[] | {alert: .labels.alertname, job: .labels.job, state: .state}"'

# Check Prometheus configuration
curl -s http://localhost:9090/api/v1/status/config | jq '.data.yaml'

# Check Prometheus metrics about itself
curl -s http://localhost:9090/metrics | grep prometheus_

# Access Prometheus web interface
echo "Prometheus UI: http://localhost:9090"
echo "Alerts page: http://localhost:9090/alerts"
echo "Targets page: http://localhost:9090/targets"
echo "Rules page: http://localhost:9090/rules"

# Quick alert test function for any service
test_service_alert() {
    SERVICE_NAME=$1
    echo "Testing alerts for service: $SERVICE_NAME"
    echo "1. Checking if service is monitored..."
    curl -s http://localhost:9090/api/v1/targets | jq ".data.activeTargets[] | select(.labels.job == \"$SERVICE_NAME\") | {job: .labels.job, health: .health}"
    echo "2. Checking current alerts for service..."
    curl -s http://localhost:9090/api/v1/alerts | jq ".data.alerts[] | select(.labels.job == \"$SERVICE_NAME\") | {alert: .labels.alertname, state: .state}"
    echo "3. Stopping service to test ServiceDown alert..."
    docker-compose stop $SERVICE_NAME
    echo "4. Waiting 1 minute for alert to fire..."
    sleep 60
    curl -s http://localhost:9090/api/v1/alerts | jq ".data.alerts[] | select(.labels.job == \"$SERVICE_NAME\") | {alert: .labels.alertname, state: .state}"
    echo "5. Restarting service..."
    docker-compose start $SERVICE_NAME
}

# Usage examples:
# test_service_alert frontend
# test_service_alert game-service

# Check alert evaluation times
curl -s http://localhost:9090/api/v1/rules | jq '.data.groups[] | .rules[] | {alert: .name, evaluationTime: .evaluationTime, lastEvaluation: .lastEvaluation}'

# =============================================================================
# PROMETHEUS ALERT TROUBLESHOOTING
# =============================================================================

# If alerts are not showing:
# 1. Check if alerts.yml is loaded: curl -s http://localhost:9090/api/v1/rules
# 2. Check if prometheus.yml has rule_files section
# 3. Restart Prometheus: docker-compose restart prometheus
# 4. Check Prometheus logs: docker-compose logs prometheus

# If TestAlert is not firing:
# 1. Check if services are UP: curl -s http://localhost:9090/api/v1/targets
# 2. Wait 10 seconds (TestAlert has 10s 'for' duration)
# 3. Check alert state: curl -s http://localhost:9090/api/v1/alerts

# If ServiceDown alert is not firing:
# 1. Stop a service: docker-compose stop game
# 2. Wait 1 minute (ServiceDown has 1m 'for' duration)
# 3. Check alert: curl -s http://localhost:9090/api/v1/alerts

# =============================================================================
# EXPECTED ALERT OUTPUTS
# =============================================================================

# TestAlert (fires when services are UP):
# {
#   "alertname": "TestAlert",
#   "job": "frontend",
#   "state": "firing",
#   "activeAt": "2025-07-11T22:16:36.772878016Z"
# }

# ServiceDown Alert (fires when services are DOWN):
# {
#   "alertname": "ServiceDown", 
#   "job": "game-service",
#   "state": "firing",
#   "activeAt": "2025-07-11T22:20:15.123456789Z"
# }

# =============================================================================
# COMMON SERVICE NAMES IN THIS PROJECT
# =============================================================================
# frontend        -> port 3005
# game-service    -> port 3002
# elasticsearch   -> port 9200
# logstash        -> port 5000
# kibana          -> port 5601
# grafana         -> port 3001
# prometheus      -> port 9090 